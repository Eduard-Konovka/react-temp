{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Filter5/Filter.module.css","components/Stats3/Stats.module.css","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter5/Filter.jsx","components/Stats3/Stats.jsx","pages/9/ContactsView.jsx"],"names":["module","exports","ContactList","contacts","useSelector","getVisibleContacts","dispatch","useDispatch","className","s","list","map","id","name","number","completed","classNames","item","type","checkbox","checked","onChange","contactsOperations","toggleCompleted","onToggleCompleted","text","Button","onClick","deleteContact","onDeleteContact","ContactForm","useState","setName","setNumber","getContacts","hendleChenge","e","target","value","reset","onSubmit","preventDefault","contact","includes","alert","addContact","form","label","title","pattern","required","input","Filter","getFilter","filter","changeFilter","connect","state","total","items","length","reduce","stats","iconStyles","marginTop","marginBottom","ContactView","isLoadingContacts","contactsSelectors","getLoading","showModal","setShowModal","toggleModal","useEffect","fetchContacts","Section","IconButton","style","width","height","fill","Spinner","size","Modal","forClose"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,IAAM,yBAAyB,KAAO,0BAA0B,KAAO,0BAA0B,UAAY,+BAA+B,KAAO,0BAA0B,SAAW,gC,oBCA1MD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,2BAA2B,MAAQ,6B,oBCAjID,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,oBCA1DD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,KAAO,oBAAoB,MAAQ,qBAAqB,MAAQ,uB,kLCMhG,SAASC,IACtB,IAAMC,EAAWC,YAAYC,KACvBC,EAAWC,cAMjB,OACE,oBAAIC,UAAWC,IAAEC,KAAjB,SACGP,EAASQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,UAArB,OACZ,qBAAaP,UAAWQ,IAAWP,IAAEQ,KAAMF,GAAaN,IAAEM,WAA1D,UACE,uBACEG,KAAK,WACLV,UAAWC,IAAEU,SACbC,QAASL,EACTM,SAAU,kBAXM,SAAAT,GAAE,OAC1BN,EAASgB,IAAmBC,gBAAgBX,IAUpBY,CAAkBZ,MAEpC,mBAAGJ,UAAWC,IAAEgB,KAAhB,mBAA0BZ,EAA1B,aAAmCC,KACnC,cAACY,EAAA,EAAD,CAAQR,KAAK,SAASS,QAAS,kBAff,SAAAf,GAAE,OAAIN,EAASgB,IAAmBM,cAAchB,IAe3BiB,CAAgBjB,IAArD,0DAROA,Q,sCCXF,SAASkB,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOlB,EAAP,KAAamB,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOjB,EAAP,KAAemB,EAAf,KACM9B,EAAWC,YAAY8B,KACvB5B,EAAWC,cAEX4B,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBxB,EAAR,EAAQA,KAAMyB,EAAd,EAAcA,MAEd,OAAQzB,GACN,IAAK,OACHmB,EAAQM,GACR,MAEF,IAAK,SACHL,EAAUK,GACV,MAEF,QACE,SAcAC,EAAQ,WACZP,EAAQ,IACRC,EAAU,KAGZ,OACE,sBAAMO,SAhBc,SAAAJ,GACpBA,EAAEK,iBAEFtC,EAASQ,KAAI,SAAA+B,GAAO,OAAIA,EAAQ7B,QAAM8B,SAAS9B,GAC3C+B,MAAM,0FAAD,OAAqB/B,EAArB,sFACLP,EAASgB,IAAmBuB,WAAW,CAAEhC,OAAMC,YAEnDyB,KAS+B/B,UAAWC,IAAEqC,KAA5C,SACE,wBAAOtC,UAAWC,IAAEsC,MAApB,UACE,mBAAGvC,UAAWC,IAAEuC,MAAhB,gCACA,uBACE9B,KAAK,OACLL,KAAK,OACLoC,QAAQ,yHACRD,MAAM,kcACNE,UAAQ,EACRZ,MAAOzB,EACPQ,SAAUc,EACV3B,UAAWC,IAAE0C,QAGf,mBAAG3C,UAAWC,IAAEuC,MAAhB,4CACA,uBACE9B,KAAK,MACLL,KAAK,SACLoC,QAAQ,yFACRD,MAAM,giBACNE,UAAQ,EACRZ,MAAOxB,EACPO,SAAUc,EACV3B,UAAWC,IAAE0C,QAGf,cAAC,IAAD,CAAQjC,KAAK,SAAb,8G,8BCnEO,SAASkC,IACtB,IAAMd,EAAQlC,YAAYiD,KACpB/C,EAAWC,cAEjB,OACE,wBAAOC,UAAWC,IAAE6C,OAApB,6FAEE,uBACEpC,KAAK,OACLoB,MAAOA,EACP9B,UAAWC,IAAE0C,MACb9B,SAAU,SAAAe,GAAC,OAAI9B,EAASiD,YAAanB,EAAEC,OAAOC,c,sBCWvCkB,eALS,SAAAC,GAAK,MAAK,CAChCC,MAAOD,EAAMtD,SAASwD,MAAMC,OAC5B7C,WARgCZ,EAQKsD,EAAMtD,SAASwD,MAPpDxD,EAAS0D,QACP,SAACH,EAAOhB,GAAR,OAAqBA,EAAQ3B,UAAY2C,EAAQ,EAAIA,IACrD,KAH8B,IAAAvD,IAWnBqD,EAxBD,SAAC,GAAD,IAAGE,EAAH,EAAGA,MAAO3C,EAAV,EAAUA,UAAV,OACZ,sBAAKP,UAAWC,IAAEqD,MAAlB,UACE,oBAAGtD,UAAWC,IAAEQ,KAAhB,UACE,sBAAMT,UAAWC,IAAE6B,MAAnB,SAA2BoB,IAC3B,sBAAMlD,UAAWC,IAAEsC,MAAnB,+CAEF,oBAAGvC,UAAWC,IAAEQ,KAAhB,UACE,sBAAMT,UAAWC,IAAE6B,MAAnB,SAA2BvB,IAC3B,sBAAMP,UAAWC,IAAEsC,MAAnB,6E,gCCGAgB,EAAa,CACjBC,UAAW,GACXC,aAAc,IAGD,SAASC,IACtB,IAAM5D,EAAWC,cACX4D,EAAoB/D,YAAYgE,IAAkBC,YAExD,EAAkCtC,oBAAS,GAA3C,mBAAOuC,EAAP,KAAkBC,EAAlB,KAEMC,EAAc,kBAAMD,GAAa,SAAAd,GAAK,OAAKA,MAIjD,OAFAgB,qBAAU,kBAAMnE,EAASgB,IAAmBoD,mBAAkB,CAACpE,IAG7D,qCACE,eAACqE,EAAA,EAAD,WACE,cAACvB,EAAD,IACA,cAAC,EAAD,IACA,cAACwB,EAAA,EAAD,CACE1D,KAAK,SACL2D,MAAOd,EACPpC,QAAS6C,EACT,aAAW,8FAJb,SAME,cAAC,IAAD,CAASM,MAAM,KAAKC,OAAO,KAAKC,KAAK,cAIzC,cAACL,EAAA,EAAD,UACGR,EAAoB,cAACc,EAAA,EAAD,CAASC,KAAM,MAAU,cAAChF,EAAD,MAG/CoE,GACC,eAACa,EAAA,EAAD,CAAOC,SAAUZ,EAAjB,UACE,cAAC1C,EAAD,IACA,cAAC,IAAD,CAAQZ,KAAK,SAASS,QAAS6C,EAA/B","file":"static/js/ContactsView.6cec0ee3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"ContactList_box__1V3Yc\",\"list\":\"ContactList_list__FdRtw\",\"item\":\"ContactList_item__3kUy5\",\"completed\":\"ContactList_completed__Eb48f\",\"text\":\"ContactList_text__ijPCI\",\"checkbox\":\"ContactList_checkbox__1OCcQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2ltSW\",\"label\":\"ContactForm_label__3A3ov\",\"title\":\"ContactForm_title__1rsx7\",\"input\":\"ContactForm_input__2O2og\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__3XVkj\",\"input\":\"Filter_input__ocRNc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stats\":\"Stats_stats__3wRax\",\"item\":\"Stats_item__179SH\",\"value\":\"Stats_value__3wCkc\",\"label\":\"Stats_label__2ZRVm\"};","import { useSelector, useDispatch } from 'react-redux';\nimport classNames from 'classnames';\nimport { getVisibleContacts } from 'store/redux7/contacts/contacts-selectors';\nimport { contactsOperations } from 'store/redux7/contacts';\nimport Button from 'components/Button';\nimport s from './ContactList.module.css';\n\nexport default function ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\n  const onToggleCompleted = id =>\n    dispatch(contactsOperations.toggleCompleted(id));\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number, completed }) => (\n        <li key={id} className={classNames(s.item, completed && s.completed)}>\n          <input\n            type=\"checkbox\"\n            className={s.checkbox}\n            checked={completed}\n            onChange={() => onToggleCompleted(id)}\n          />\n          <p className={s.text}>{`${name}: ${number}`}</p>\n          <Button type=\"button\" onClick={() => onDeleteContact(id)}>\n            Удалить\n          </Button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'store/redux7/contacts/contacts-selectors';\nimport contactsOperations from 'store/redux7/contacts/contacts-operations';\nimport Button from 'components/Button/Button';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const hendleChenge = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const hendleSubmite = e => {\n    e.preventDefault();\n\n    contacts.map(contact => contact.name).includes(name)\n      ? alert(`Контакт с именем ${name} уже существует!`)\n      : dispatch(contactsOperations.addContact({ name, number }));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={hendleSubmite} className={s.form}>\n      <label className={s.label}>\n        <p className={s.title}>Имя</p>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={hendleChenge}\n          className={s.input}\n        />\n\n        <p className={s.title}>Номер</p>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={hendleChenge}\n          className={s.input}\n        />\n\n        <Button type=\"submit\">Добавить контакт</Button>\n      </label>\n    </form>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'store/redux7/contacts/contacts-selectors';\nimport { changeFilter } from 'store/redux7/contacts/contacts-actions';\nimport s from './Filter.module.css';\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.filter}>\n      Фильтр по имени\n      <input\n        type=\"text\"\n        value={value}\n        className={s.input}\n        onChange={e => dispatch(changeFilter(e.target.value))}\n      />\n    </label>\n  );\n}\n","import { connect } from 'react-redux';\nimport s from './Stats.module.css';\n\nconst Stats = ({ total, completed }) => (\n  <div className={s.stats}>\n    <p className={s.item}>\n      <span className={s.value}>{total}</span>\n      <span className={s.label}>Всего</span>\n    </p>\n    <p className={s.item}>\n      <span className={s.value}>{completed}</span>\n      <span className={s.label}>Выполнено</span>\n    </p>\n  </div>\n);\n\nconst getCompletedContactsCount = contacts =>\n  contacts.reduce(\n    (total, contact) => (contact.completed ? total + 1 : total),\n    0,\n  );\n\nconst mapStateToProps = state => ({\n  total: state.contacts.items.length,\n  completed: getCompletedContactsCount(state.contacts.items),\n});\n\nexport default connect(mapStateToProps)(Stats);\n","import { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'store/redux7/contacts';\nimport Section from 'components/Section';\nimport ContactList from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter5/Filter';\nimport Stats from 'components/Stats3/Stats';\nimport Modal from 'components/Modal/Modal';\nimport Button from 'components/Button/Button';\nimport IconButton from 'components/IconButton/IconButton';\nimport Spinner from 'components/Spinner/Spinner';\nimport { ReactComponent as AddIcon } from 'icons/add.svg';\n\nconst iconStyles = {\n  marginTop: 20,\n  marginBottom: 20,\n};\n\nexport default function ContactView() {\n  const dispatch = useDispatch();\n  const isLoadingContacts = useSelector(contactsSelectors.getLoading);\n\n  const [showModal, setShowModal] = useState(false);\n\n  const toggleModal = () => setShowModal(state => !state);\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  return (\n    <>\n      <Section>\n        <Filter />\n        <Stats />\n        <IconButton\n          type=\"button\"\n          style={iconStyles}\n          onClick={toggleModal}\n          aria-label=\"Добавить контакт\"\n        >\n          <AddIcon width=\"36\" height=\"36\" fill=\"#fff\" />\n        </IconButton>\n      </Section>\n\n      <Section>\n        {isLoadingContacts ? <Spinner size={100} /> : <ContactList />}\n      </Section>\n\n      {showModal && (\n        <Modal forClose={toggleModal}>\n          <ContactForm />\n          <Button type=\"button\" onClick={toggleModal}>\n            Отменить\n          </Button>\n        </Modal>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}